from abc import ABC

from exporters.def_filenames import FILE_API_SPECS, FILE_GADGET_SPECS
from exporters.exporter import Exporter
from utils.cpp_file import CppPragma, CppComment, CppBlankLine, CppFile
from utils.js_file import JSComment, JSBlankLine, JSFile


class ConstantsExporter(Exporter, ABC):
    @staticmethod
    def _generate_header_text(filename: str) -> [str]:
        """
        Generates a header for generated constants files

        :param filename: Filename to be credited for generation
        :return: header as string
        """
        return [f"This file was generated by '{filename}' at 'https://github.com/johannesgrothe/Smarthome_System'",
                f"Do not modify this file, modify '{FILE_API_SPECS}' and '{FILE_GADGET_SPECS}' and export.",
                f"Every change made will be overwritten at next export."]


class ConstantsExporterPython(ConstantsExporter, ABC):

    @staticmethod
    def _generate_imports(imports: list[(str, str)]) -> list[str]:
        lines = ["try:"]
        for package, classes in imports:
            lines.append(f"    from {package} import {classes}")
        lines.append("except ModuleNotFoundError:")
        for package, classes in imports:
            lines.append(f"    from .{package} import {classes}")
        return lines

    def _generate_header(self, docstring: str, filename: str) -> list[str]:
        lines = [f"\"\"\"{docstring}\"\"\"", ""]

        for line in self._generate_header_text(filename):
            lines.append(f"# {line}")

        return lines


class ConstantsExporterJavaScript(ConstantsExporter, ABC):
    def _add_header(self, docstring: str, filename: str, file: JSFile):
        file.add(JSComment(docstring))
        file.add(JSBlankLine())
        file.add(JSComment("\n".join(self._generate_header_text(filename))))
        file.add(JSBlankLine())


class ConstantsExporterCpp(ConstantsExporter, ABC):
    def _add_header(self, docstring: str, filename: str, file: CppFile):
        file.add(CppPragma("once"))
        file.add(CppComment(docstring))
        file.add(CppBlankLine())
        file.add(CppComment("\n".join(self._generate_header_text(filename))))
        file.add(CppBlankLine())


class ConstantsExporterSwift(ConstantsExporter, ABC):
    def _generate_header(self, docstring: str, filename: str) -> list[str]:
        lines = [f"// {docstring}", ""]
        for line in self._generate_header_text(filename):
            lines.append(f"// {line}")
        return lines
