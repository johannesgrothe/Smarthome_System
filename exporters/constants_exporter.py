import logging
from abc import abstractmethod

from exporters.definitions_loader import DefinitionsLoader
from utils.cpp_file import *
from utils.js_file import *


class ConstantsExporter:
    _definitions: dict
    _definition_file: str

    def __init__(self, definitions: str):
        self._definition_file = definitions
        self._logger = logging.getLogger(self.__class__.__name__)
        self._definitions = DefinitionsLoader(self._definition_file).get_definitions()
        self._logger.info("Definitions loaded successfully")

    def _generate_header(self, filename: str) -> [str]:
        """
        Generates a header for generated constants files

        :param filename: Filename to be credited for generation
        :return: header as string
        """
        return [f"This file was generated by '{filename}' at 'https://github.com/johannesgrothe/Smarthome_System'",
                f"Do not modify this file, modify '{self._definition_file}' and export.",
                f"Every change made will be overwritten at next export."]

    def _generate_python_header(self, docstring: str, filename: str) -> list[str]:
        lines = [f"\"\"\"{docstring}\"\"\"", ""]

        for line in self._generate_header(filename):
            lines.append(f"# {line}")

        return lines

    def _add_cpp_header(self, docstring: str, filename: str, file: CppFile):
        file.add(CppPragma("once"))
        file.add(CppComment(docstring))
        file.add(CppBlankLine())
        file.add(CppComment("\n".join(self._generate_header(filename))))
        file.add(CppBlankLine())

    def _generate_cpp_header(self, docstring: str, filename: str) -> list[str]:
        lines = [f"#pragma once", f"// {docstring}", ""]

        for line in self._generate_header(filename):
            lines.append(f"// {line}")

        return lines

    def _add_js_header(self, docstring: str, filename: str, file: JSFile):
        file.add(JSComment(docstring))
        file.add(JSBlankLine())
        file.add(JSComment("\n".join(self._generate_header(filename))))
        file.add(JSBlankLine())

    @staticmethod
    def _generate_python_imports(imports: list[(str, str)]) -> list[str]:
        lines = ["try:"]
        for package, classes in imports:
            lines.append(f"    from {package} import {classes}")
        lines.append("except ModuleNotFoundError:")
        for package, classes in imports:
            lines.append(f"    from .{package} import {classes}")
        return lines

    @abstractmethod
    def export_python(self, out_file: str):
        pass

    @abstractmethod
    def export_cpp(self, out_file: str):
        pass
