import logging
from abc import abstractmethod

from exporters.definitions_loader import DefinitionsLoader


class ConstantsExporter:

    _definition: dict
    _definition_file: str

    def __init__(self, definitions: str):
        self._definition_file = definitions
        self._logger = logging.getLogger(self.__class__.__name__)
        self._definition = DefinitionsLoader(self._definition_file).get_definitions()
        self._logger.info("Definitions loaded successfully")

    def _generate_header(self, filename: str) -> [str]:
        """
        Generates a header for generated constants files

        :param filename: Filename to be credited for generation
        :return: header as string
        """
        return [f"This file was generated by '{filename}' at 'https://github.com/johannesgrothe/Smarthome_System'",
                f"Do not modify this file, modify '{self._definition_file}' and export.",
                f"Every change made will be overwritten at next export."]

    def _generate_python_header(self, docstring: str, filename: str):
        lines = [f"\"\"\"{docstring}\"\"\"", ""]

        for line in self._generate_header(filename):
            lines.append(f"# {line}")

        return lines

    def _generate_cpp_header(self, docstring: str, filename: str):
        lines = [f"#pragma once", f"// {docstring}", ""]

        for line in self._generate_header(filename):
            lines.append(f"// {line}")

        return lines

    @abstractmethod
    def export_python(self, out_file: str):
        pass

    @abstractmethod
    def export_cpp(self, out_file: str):
        pass
